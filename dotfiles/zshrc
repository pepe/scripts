###### GIT
alias gicl="git clone"
alias gire="git rebase"
alias girie="git rebase -i"
alias girema="git rebase master"
alias girepe="git rebase pepe"
alias gire="git rebase --continue"
alias gita="git tag"
alias gist="git status"
alias gica="git commit -a"
alias gicam="git commit -am"
alias gico="git commit"
alias giad="git add"
alias gidi="git diff"
alias gidich="git diff --cached"
alias gips="git push"
alias gipl="git pull"
alias girm="git rm"
alias gilo="git l"
alias gilog="git l --graph"
alias gimv="git mv"
alias gibr="git branch"
alias gibra="git branch -a"
alias gich="git checkout"
alias gichb="git checkout -b"
alias gichma="git checkout master"
alias gichpe="git checkout pepe"
alias gichde="git checkout deploy"
alias gime="git merge"
alias gimepe="git merge pepe"
alias gisqme="git merge --squash"
alias girs="git reset"
alias girshaard="git reset --hard"
alias girss="git reset --soft"
alias girsl="git reset --soft 'HEAD^'"
alias gibl="git blame"
alias gisb="git submodule"
alias gista="git stash"
alias gistap="git stash pop"
alias gish="git show"
alias ogx="open -a GitX"

###### Global aliases 
alias mv='nocorrect mv'       # no spelling correction on mv
alias cp='nocorrect cp'       # no spelling correction on cp
alias mkdir='nocorrect mkdir' # no spelling correction on mkdir
alias j=jobs
alias pu=pushd
alias po=popd
alias d='dirs -v'
alias h=history
alias grep=egrep
alias ll='ls -l'
alias la='ls -a'
alias lal='ls -al'
alias nsr='netstat -rn -f inet'
alias o=less
alias suww="sudo -u www"
alias suwwb="sudo -u www -b"

###### screen
alias scr="screen -r"
alias scl="screen -list"
alias scs="screen -S "

###### tmux
alias tmr="tmux attach -t "
alias tml="tmux ls"
alias tms="tmux new -s "

###### These do not have to be
###### at the beginning of the command line.
alias -g M='|less'
alias -g H='|head'
alias -g T='|tail'
alias -g F='|fgrep'


###### this should be redone moved?
###### ruby
alias ss="./script/server"
alias ssd="./script/server --debugger"
alias sg="./script/generate"
alias sc="./script/console"
alias sp="./script/plugin"
alias sgm="./script/generate migration"
alias rmig="rake db:migrate"
alias rs="rake spec"
alias rsm="rake spec:models"
alias rsc="rake spec:controllers"
alias sa="./script/autospec"
alias saf="AUTOFEATURE=true autospec"
alias s64gem='sudo env ARCHFLAGS="-arch x86_64" gem'

###### List only directories and symbolic
###### links that point to directories
alias lsd='ls -ld *(-/DN)'

###### List only file beginning with "."
alias lsa='ls -ld .*'

###### Hosts
alias edok='ssh edoktorand'
alias fina='ssh fina'

###### Host-Specific stuff
if [ -f ~/.zshrc-`hostname` ]; then
  . ~/.zshrc-`hostname`
fi

###### History
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
HIST_IGNORE_DUPS=true
APPEND_HISTORY=true
SAVEHIST=10000
 
setopt HIST_IGNORE_DUPS
setopt EXTENDED_HISTORY
 
###### Search path for the cd command
cdpath=(.. ~ ~/Projects)

###### Path addiction and exports
path=(/opt/local/bin /opt/local/sbin /usr/local/bin /usr/local/sbin
~/Application ~/bin ~/.gem/ruby/1.8/bin $path)
manpath=($X11HOME/man /usr/man /usr/lang/man /usr/local/man /usr/share/man
/opt/local/man)
export MANPATH
export EDITOR=vim
export TERMCMD='xterm -rv -wc -132 -fn 10x20'
export JAVA_HOME=/Library/Java/Home
export ANT_HOME=/usr/local/ant
export VISUALWORKS=/Users/pepe/vw7.6nc


###### Grep source trees
alias rbfin='find -type f -a \( -name "*.rb" -o -name "*.haml" \) | \
              xargs grep '
###### Shell functions
setenv() { typeset -x "${1}${1:+=}${(@)argv[2,$#]}" }  # csh compatibility
freload() { while (( $# )); do; unfunction $1; autoload -U $1; shift; done }

# Where to look for autoloaded function definitions
fpath=($fpath $HOME/.zsh/func)

# Autoload all shell functions from all directories in $fpath (following
# symlinks) that have the executable bit on (the executable bit is not
# necessary, but gives you an easy way to stop the autoloading of a
# particular shell function). $fpath should not be empty for this to work.
for func in $^fpath/*(N-.x:t); autoload $func

# automatically remove duplicates from these arrays
typeset -U path cdpath fpath manpath

setopt promptsubst

# Load the prompt theme system
autoload -U promptinit
promptinit

# http://www.simplisticcomplexity.com/2008/03/13/show-your-git-branch-name-in-your-prompt/
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[\1]/'
}
function precmd() { PROMPT='%n@%m$(parse_git_branch)%% ' }
RPROMPT=" %~"
    # default prompt

# Some environment variables

export HELPDIR=/usr/local/lib/zsh/help  # directory for run-help function to find docs

MAILCHECK=300
HISTSIZE=500
SAVEHIST=500

DIRSTACKSIZE=20

# Watch for my friends
#watch=( $(<~/.friends) )       # watch for people in .friends file
watch=(notme)                   # watch for everybody but me
LOGCHECK=300                    # check every 5 min for login/logout activity
WATCHFMT='%n %a %l from %m at %t.'

# Set/unset  shell options
setopt   notify globdots correct pushdtohome cdablevars autolist
setopt   correctall autocd recexact longlistjobs
setopt   autoresume histignoredups pushdsilent noclobber
setopt   autopushd pushdminus extendedglob rcquotes mailwarning
unsetopt bgnice autoparamslash

# Autoload zsh modules when they are referenced
zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload -ap zsh/mapfile mapfile

# Some nice key bindings
bindkey '^X^Z' universal-argument ' ' magic-space
bindkey '^X^A' vi-find-prev-char-skip
#bindkey '^Xa' _expand_alias
#bindkey '^Z' accept-and-hold
#bindkey -s '\M-/' \\\\
#bindkey -s '\M-=' \|

bindkey -v               # vi key bindings

# bindkey -e                 # emacs key bindings
bindkey ' ' magic-space    # also do history expansion on space
bindkey '^I' complete-word # complete on tab, leave expansion to _expand

# Setup new style completion system. To see examples of the old style (compctl
# based) programmable completion, check Misc/compctl-examples in the zsh
# distribution.
autoload -U compinit
compinit

# Use hard limits, except for a smaller stack and no core dumps
unlimit
limit stack 8192
limit core 0
limit -s

umask 022


# Completion Styles

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'
    
# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# command for process lists, the local web server details and host completion
#zstyle ':completion:*:processes' command 'ps -o pid,s,nice,stime,args'
#zstyle ':completion:*:urls' local 'www' '/var/www/htdocs' 'public_html'
zstyle '*' hosts $hosts

# Filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro'
# the same for old style completion
#fignore=(.o .c~ .old .pro)

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

# "THE BEER-WARE LICENSE" (Revision 42):
# <josef.pospisil@laststar.eu> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return. 
# Josef 'pepe' Pospisil

# rvm-install added line:
if [[ -s /Users/pepe/.rvm/scripts/rvm ]] ; then source /Users/pepe/.rvm/scripts/rvm ; fi

# colfm
if [[ -s /Users/pepe/Projects/fos/colfm/colfm.zsh ]] ; then source /Users/pepe/Projects/fos/colfm/colfm.zsh ; fi

# -- start rip config -- #
RIPDIR=/Users/pepe/.rip
RUBYLIB="$RUBYLIB:$RIPDIR/active/lib"
PATH="$PATH:$RIPDIR/active/bin"
export RIPDIR RUBYLIB PATH
# -- end rip config -- #

